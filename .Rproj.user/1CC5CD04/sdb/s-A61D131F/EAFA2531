{
    "collab_server" : "",
    "contents" : "# The purpose of this file is to outline the functions used in Part 2 \n# Longitudinal Data Class and Methods of the Functional & Object Oriented\n# Programming Assignment for the Coursera - Advanced R Programming course.\n\n# Descr: The purpose of this part is to create a new class for representing\n# longitudinal data, which is data that is collected over time on a given \n# subject/person. This data may be collected at multiple visits, in multiple \n# locations. You will need to write a series of generics and methods for \n# interacting with this kind of data.\n\n#### Please note the methods coded are not exhaustive and are only there to\n#### meet the demands of the input questions outlined.\n\n#-----------------------LOAD LIBRARIES---------------------------#\nlibrary(readr)\nlibrary(dplyr)\nlibrary(tidyr)\n#------------------------DATA VARIABLES--------------------------#\n\n#The variables in the dataset are\n## id: the subject identification number\n## visit: the visit number which can be 0, 1, or 2\n## room: the room in which the monitor was placed\n## value: the level of pollution in micrograms per cubic meter\n## timepoint: the time point of the monitor value for a given visit/room\n\n#-----------------------WRITE FUNCTIONS--------------------------#\n\n# 1. Write a function make_LD: a function that converts a data frame into a “LongitudinalData” object.\nmake_LD<-function(DF){\n df<- nest(DF, -id)\n  output<-structure(df,class=\"LongitudinalData\")\n  return(invisible(output))\n}\n\n# 2. subject: a generic function for extracting subject-specific information\nsubject <- function (df, id) {\n  UseMethod(\"subject\")\n}\n\n# 3. visit: a generic function for extracting visit-specific information\nvisit <- function ( subject, visit) {\n  UseMethod(\"visit\")\n}\n\n# 4. room: a generic function for extracting room-specific information\nroom <- function( visit, room) {\n  UseMethod(\"room\")\n}\n#--------------------METHODS: LONGITUDINALDATA-------------------#\n# Define methods for 1. LongitudinalData Objects.\n# Only those required for assignment.\n\n#This method prints out the amount of subjects in the dataset.\nprint.LongitudinalData <- function(x) {\n  cat(\"Longitudinal dataset with\", length(x$id), \"subjects\")\n  return (invisible(x))\n}\n\n# This method returns a subject instance when an id is given.\nsubject.LongitudinalData<-function(df, id) {\n  index <- which(df$id == id)\n  if (length(index) == 0)\n    return(NULL)\n  structure(list(id = id, data = df$data[[index]]), class = \"Subject\")\n}\n\n#------------------------METHODS: SUBJECT------------------------#\n# Write methods for 2. Subject objects.\n\n# This method prints out the id of the subject instance.\nprint.Subject <-function(x) {\n  cat(\"Subject ID:\",x$id)\n  invisible(x)\n}\n\n# Method returns summary of subject instance.\nsummary.Subject<-function(instance) {\n  output <- instance$data %>% \n    group_by(visit, room) %>%\n    summarise(value = mean(value)) %>% \n    spread(room, value) %>% \n    as.data.frame\n  structure(list(id = instance$id,\n                 output = output), class = \"Summary\")\n}\n\n# method takes subject instance and visit number, returns visit instance.\nVisit.Subject <- function(subject, visitnum) {\n  data <- subject$data %>% \n    filter(visit == visitnum) %>% \n    select(-visit)\n  structure(list(id = subject$id,\n                 visitnum = visitnum,\n                 data = data), class = \"Visit\")\n}\n\n#--------------------------METHODS: VISIT------------------------#\n# Write methods for 3. Visit objects.\n\n# Method takes visit instance and room name, returns room instance.\nRoom.Visit <- function(visit, roomname) {\n  data <- visit$data %>% \n    filter(room == roomname) %>% \n    select(-room)\n  structure(list(id = visit$id,\n                 visitnum = visit$visitnum,\n                 room = roomname,\n                 data = data), class = \"Room\")\n}\n#--------------------------METHODS: ROOM-------------------------#\n# Write methods for 4. Room objects.\n\n# Method returns summary for the room instance.\nsummary.Room <- function(object) {\n  output <- summary(object$data$value)\n  structure(list(id = object$id,\n                 output = output), class = \"Summary\")\n}\n\n# Method returns details for room instance.\nprint.Room <- function(x) {\n  cat(\"ID:\", x$id, \"\\n\")\n  cat(\"Visit:\", x$visitnum, \"\\n\")\n  cat(\"Room:\", x$room)\n  invisible(x)\n}\n\n\n#---------------------------METHODS: SUMMARY---------------------#\n# Write methods for Summary, note this is not linked to a generic\n# function as above, this is the final print allowing us to view\n# the output of the summary method functions. You will noticr the\n# column calls are not named as such as theire are multiple summary calls.\n\nprint.Summary <- function(x) {\n  cat(\"ID:\", x[[1]], \"\\n\")\n  print(x[[2]])\n  invisible(x)\n}\n\n\n\n#--------------------------END OF PROGRAM------------------------#\n#--------------------------METHODS: ROOM-------------------------#\n#",
    "created" : 1510585270156.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2387585275",
    "id" : "EAFA2531",
    "lastKnownWriteTime" : 1511023762,
    "last_content_update" : 1511023762377,
    "path" : "C:/Users/Nicholas/Desktop/Online Courses/Coursera Mastering Software Development in R Specialization/Advanced R Programming/Advanced-R-Programming-Assignment/oop_code.R",
    "project_path" : "oop_code.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}